!function(){"use strict";function t(t,n,o,e){function r(){return i?e.when(i):o.get("/tokens/current").then(function(){})}function a(){}function s(){t.remove("token"),n.go("login")}var i=null,u={requestCurrentUser:r,login:a,logout:s};return u}angular.module("app.security",[]).factory("securityService",t),t.$inject=["storageService","$state","httpClient","$q"]}(),function(){"use strict";function t(t,n,o){t.$state=n,t.$stateParams=o,t.$on("$stateChangeStart",function(t,n,o){console.log("$stateChangeStart to "+n.to+"- fired when the transition begins. toState,toParams : \n",n,o)}),t.$on("$stateChangeError",function(){console.log("$stateChangeError - fired when an error occurs during transition."),console.log(arguments)}),t.$on("$stateChangeSuccess",function(t,n){console.log("$stateChangeSuccess to "+n.name+"- fired once the state transition is complete.")}),t.$on("$viewContentLoaded",function(t){console.log("$viewContentLoaded - fired after dom rendered",t)}),t.$on("$stateNotFound",function(t,n,o,e){console.log("$stateNotFound "+n.to+"  - fired when a state cannot be found by its name."),console.log(n,o,e)})}angular.module("app.sections",["ui.router"]),angular.module("app.sections").run(t),t.$inject=["$rootScope","$state","$stateParams"]}(),function(){"use strict";function t(t,n){function o(n,o){function r(n){n.forEach(function(n){n.resolve=angular.extend(n.resolve||{},e.resolveAlways),t.state(n),i.push(n)})}function a(){return o.get().filter(function(t){return t.settings&&t.settings.module})}function s(){return i}var i=[],u={getSections:s,register:r,getModules:a};return u}var e={resolveAlways:{}};this.configure=function(t){angular.extend(e,t)},n.html5Mode(!0),this.$get=o,o.$inject=["$rootScope","$state"]}angular.module("app.sections").provider("sectionManager",t),t.$inject=["$stateProvider","$locationProvider"]}(),function(){"use strict";angular.module("app.logging",[])}(),function(){"use strict";function t(t){function n(n,o){t.info("Info: "+n,o)}function o(n,o){t.info("WARNING: "+n,o)}function e(n,o){t.error("ERROR: "+n,o)}var r={info:n,warning:o,error:e,log:t};return r}angular.module("app.logging").service("logger",t),t.$inject=["$log"]}(),function(){"use strict";angular.module("app.layout",["ui.bootstrap"])}(),function(){"use strict";function t(t){t.register([])}angular.module("app.layout").run(t),t.$inject=["sectionManager"]}(),function(){"use strict";function t(t){t.register(n())}function n(){return[{name:"dashboard",url:"",controller:"DashboardController",controllerAs:"vm",templateUrl:"app/areas/dashboard/dashboard.html",settings:{module:!0,order:1}}]}angular.module("app.dashboard",["app.sections"]).run(t),t.$inject=["sectionManager"]}(),function(){"use strict";function t(){this.message="Hello World"}angular.module("app.dashboard").controller("DashboardController",t)}(),function(){"use strict";function t(t){var n=this;n.sections=t.getModules()}angular.module("app.layout").controller("ShellController",t),t.$inject=["sectionManager"]}(),function(){"use strict"}(),function(){"use strict";angular.module("solomon",["app.layout","app.logging","app.sections","solomon.partials","app.dashboard","symbiote.common"])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9zZWN1cml0eS9zZWN1cml0eVNlcnZpY2UuanMiLCJjb21tb24vcm91dGluZy9zZWN0aW9ucy5tb2R1bGUuanMiLCJjb21tb24vcm91dGluZy9zZWN0aW9ucy5tYW5hZ2VyLmpzIiwiY29tbW9uL2xvZ2dpbmcvbG9nZ2VyLm1vZHVsZS5qcyIsImNvbW1vbi9sb2dnaW5nL2xvZ2dlci5zZXJ2aWNlLmpzIiwibGF5b3V0L2xheW91dC5tb2R1bGUuanMiLCJhcmVhcy9sb2dpbi9sb2dpbi5tb2R1bGUuanMiLCJhcmVhcy9kYXNoYm9hcmQvZGFzaGJvYXJkLm1vZHVsZS5qcyIsImFyZWFzL2Rhc2hib2FyZC9kYXNoYm9hcmQuY29udHJvbGxlci5qcyIsImxheW91dC9zaGVsbC5jb250cm9sbGVyLmpzIiwibGF5b3V0L2xheW91dC5zdGF0ZXMuanMiLCJzb2xvbW9uLmpzIl0sIm5hbWVzIjpbInNlY3VyaXR5U2VydmljZSIsInN0b3JhZ2VTZXJ2aWNlIiwiJHN0YXRlIiwiaHR0cENsaWVudCIsIiRxIiwiX3JlcXVlc3RDdXJyZW50VXNlciIsIl9jdXJyZW50VXNlciIsIndoZW4iLCJnZXQiLCJ0aGVuIiwiX2xvZ2luIiwiX2xvZ291dCIsInJlbW92ZSIsImdvIiwic2VydmljZSIsInJlcXVlc3RDdXJyZW50VXNlciIsImxvZ2luIiwibG9nb3V0IiwiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiLCJkZWJ1Z1JvdXRlcyIsIiRyb290U2NvcGUiLCIkc3RhdGVQYXJhbXMiLCIkb24iLCJldmVudCIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImNvbnNvbGUiLCJsb2ciLCJ0byIsImFyZ3VtZW50cyIsIm5hbWUiLCJ1bmZvdW5kU3RhdGUiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwicnVuIiwic2VjdGlvbk1hbmFnZXJQcm92aWRlciIsIiRzdGF0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJTZWN0aW9uTWFuYWdlclNlcnZpY2UiLCJyZWdpc3RlclNlY3Rpb25zIiwic2VjdGlvbnMiLCJmb3JFYWNoIiwic3RhdGUiLCJyZXNvbHZlIiwiZXh0ZW5kIiwiY29uZmlnIiwicmVzb2x2ZUFsd2F5cyIsIl9zZWN0aW9ucyIsInB1c2giLCJnZXRNb2R1bGVzIiwiZmlsdGVyIiwieCIsInNldHRpbmdzIiwiZ2V0U2VjdGlvbnMiLCJyZWdpc3RlciIsImNvbmZpZ3VyZSIsIm9wdHMiLCJodG1sNU1vZGUiLCIkZ2V0IiwicHJvdmlkZXIiLCJsb2dnZXJTZXJ2aWNlIiwiJGxvZyIsImluZm8iLCJtZXNzYWdlIiwiZGF0YSIsIndhcm5pbmciLCJlcnJvciIsImFwcFJ1biIsInNlY3Rpb25NYW5hZ2VyIiwiZ2V0U3RhdGVzIiwidXJsIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsInRlbXBsYXRlVXJsIiwib3JkZXIiLCJEYXNoYm9hcmRDb250cm9sbGVyIiwiU2hlbGxDb250cm9sbGVyIiwidm0iXSwibWFwcGluZ3MiOiJDQUFDLFdBQ0csWUFHSixTQUFTQSxHQUFnQkMsRUFBZ0JDLEVBQVFDLEVBQVlDLEdBY3pELFFBQVNDLEtBRUwsTUFBSUMsR0FDT0YsRUFBR0csS0FBS0QsR0FJWkgsRUFBV0ssSUFBSSxtQkFDckJDLEtBQUssY0FLVixRQUFTQyxNQUdULFFBQVNDLEtBQ0xWLEVBQWVXLE9BQU8sU0FDdEJWLEVBQU9XLEdBQUcsU0E5QmQsR0FBSVAsR0FBZSxLQUVmUSxHQUNBQyxtQkFBb0JWLEVBRXBCVyxNQUFPTixFQUNQTyxPQUFRTixFQUdaLE9BQU9HLEdBZlhJLFFBQVFDLE9BQU8sbUJBQ1ZDLFFBQVEsa0JBQW1CcEIsOERDRC9CLFdBQ0csWUFNSixTQUFTcUIsR0FBWUMsRUFBWXBCLEVBQVFxQixHQU1yQ0QsRUFBV3BCLE9BQVNBLEVBQ3BCb0IsRUFBV0MsYUFBZUEsRUFFMUJELEVBQVdFLElBQUksb0JBQXFCLFNBQVVDLEVBQU9DLEVBQVNDLEdBQzFEQyxRQUFRQyxJQUFJLHdCQUEwQkgsRUFBUUksR0FBSyw0REFBNkRKLEVBQVNDLEtB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IiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHAuc2VjdXJpdHknLCBbXSlcclxuICAgIC5mYWN0b3J5KCdzZWN1cml0eVNlcnZpY2UnLCBzZWN1cml0eVNlcnZpY2UpO1xyXG5cclxuLyogQG5nSW5qZWN0ICovXHJcbmZ1bmN0aW9uIHNlY3VyaXR5U2VydmljZShzdG9yYWdlU2VydmljZSwgJHN0YXRlLCBodHRwQ2xpZW50LCAkcSkge1xyXG5cclxuICAgIHZhciBfY3VycmVudFVzZXIgPSBudWxsO1xyXG5cclxuICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgIHJlcXVlc3RDdXJyZW50VXNlcjogX3JlcXVlc3RDdXJyZW50VXNlcixcclxuXHJcbiAgICAgICAgbG9naW46IF9sb2dpbixcclxuICAgICAgICBsb2dvdXQ6IF9sb2dvdXRcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc2VydmljZTtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gX3JlcXVlc3RDdXJyZW50VXNlcigpIHtcclxuXHJcbiAgICAgICAgaWYgKF9jdXJyZW50VXNlcilcclxuICAgICAgICAgICAgcmV0dXJuICRxLndoZW4oX2N1cnJlbnRVc2VyKTtcclxuXHJcblxyXG5cclxuICAgICAgICByZXR1cm4gaHR0cENsaWVudC5nZXQoJy90b2tlbnMvY3VycmVudCcpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gX2xvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCwgcGVyc2lzdCkge1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBfbG9nb3V0KCkge1xyXG4gICAgICAgIHN0b3JhZ2VTZXJ2aWNlLnJlbW92ZSgndG9rZW4nKTtcclxuICAgICAgICAkc3RhdGUuZ28oJ2xvZ2luJyk7XHJcbiAgICB9XHJcbn0iLCJcclxuYW5ndWxhci5tb2R1bGUoJ2FwcC5zZWN0aW9ucycsIFsndWkucm91dGVyJ10pO1xyXG5cclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAuc2VjdGlvbnMnKS5ydW4oZGVidWdSb3V0ZXMpO1xyXG5cclxuLyogQG5nSW5qZWN0ICovXHJcbmZ1bmN0aW9uIGRlYnVnUm91dGVzKCRyb290U2NvcGUsICRzdGF0ZSwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAvLyBDcmVkaXRzOiBBZGFtJ3MgYW5zd2VyIGluIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIwNzg2MjYyLzY5MzYyXHJcbiAgICAvLyBQYXN0ZSB0aGlzIGluIGJyb3dzZXIncyBjb25zb2xlXHJcblxyXG4gICAgLy92YXIgJHJvb3RTY29wZSA9IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW3VpLXZpZXddXCIpWzBdKS5pbmplY3RvcigpLmdldCgnJHJvb3RTY29wZScpO1xyXG5cclxuICAgICRyb290U2NvcGUuJHN0YXRlID0gJHN0YXRlO1xyXG4gICAgJHJvb3RTY29wZS4kc3RhdGVQYXJhbXMgPSAkc3RhdGVQYXJhbXM7XHJcblxyXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN0YXJ0JywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJyRzdGF0ZUNoYW5nZVN0YXJ0IHRvICcgKyB0b1N0YXRlLnRvICsgJy0gZmlyZWQgd2hlbiB0aGUgdHJhbnNpdGlvbiBiZWdpbnMuIHRvU3RhdGUsdG9QYXJhbXMgOiBcXG4nLCB0b1N0YXRlLCB0b1BhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnJHN0YXRlQ2hhbmdlRXJyb3IgLSBmaXJlZCB3aGVuIGFuIGVycm9yIG9jY3VycyBkdXJpbmcgdHJhbnNpdGlvbi4nKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhhcmd1bWVudHMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnJHN0YXRlQ2hhbmdlU3VjY2VzcyB0byAnICsgdG9TdGF0ZS5uYW1lICsgJy0gZmlyZWQgb25jZSB0aGUgc3RhdGUgdHJhbnNpdGlvbiBpcyBjb21wbGV0ZS4nKTtcclxuICAgIH0pO1xyXG5cclxuICAgICRyb290U2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnJHZpZXdDb250ZW50TG9hZGVkIC0gZmlyZWQgYWZ0ZXIgZG9tIHJlbmRlcmVkJywgZXZlbnQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZU5vdEZvdW5kJywgZnVuY3Rpb24gKGV2ZW50LCB1bmZvdW5kU3RhdGUsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCckc3RhdGVOb3RGb3VuZCAnICsgdW5mb3VuZFN0YXRlLnRvICsgJyAgLSBmaXJlZCB3aGVuIGEgc3RhdGUgY2Fubm90IGJlIGZvdW5kIGJ5IGl0cyBuYW1lLicpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHVuZm91bmRTdGF0ZSwgZnJvbVN0YXRlLCBmcm9tUGFyYW1zKTtcclxuICAgIH0pO1xyXG59IiwiXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAuc2VjdGlvbnMnKVxyXG5cdC5wcm92aWRlcignc2VjdGlvbk1hbmFnZXInLCBzZWN0aW9uTWFuYWdlclByb3ZpZGVyKTtcclxuXHJcbi8qIEBuZ0luamVjdCAqL1xyXG5mdW5jdGlvbiBzZWN0aW9uTWFuYWdlclByb3ZpZGVyKCRzdGF0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xyXG5cclxuXHR2YXIgY29uZmlnID0ge1xyXG5cdFx0cmVzb2x2ZUFsd2F5czoge31cclxuXHR9XHJcblxyXG5cdHRoaXMuY29uZmlndXJlID0gZnVuY3Rpb24gKG9wdHMpIHtcclxuXHRcdGFuZ3VsYXIuZXh0ZW5kKGNvbmZpZywgb3B0cyk7XHJcblx0fTtcclxuXHJcblx0JGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG5cclxuXHJcblx0dGhpcy4kZ2V0ID0gU2VjdGlvbk1hbmFnZXJTZXJ2aWNlO1xyXG5cclxuXHQvLyBAbmdJbmplY3RcclxuXHRmdW5jdGlvbiBTZWN0aW9uTWFuYWdlclNlcnZpY2UoJHJvb3RTY29wZSwgJHN0YXRlKSB7XHJcblxyXG5cdCAgICB2YXIgX3NlY3Rpb25zID0gW107XHJcblxyXG5cdFx0dmFyIHNlcnZpY2UgPSB7XHJcblx0XHRcdGdldFNlY3Rpb25zOiBnZXRTZWN0aW9ucyxcclxuXHRcdFx0cmVnaXN0ZXI6IHJlZ2lzdGVyU2VjdGlvbnMsXHJcbiAgICAgICAgICAgIGdldE1vZHVsZXM6IGdldE1vZHVsZXNcclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIHNlcnZpY2U7XHJcblxyXG5cdFx0ZnVuY3Rpb24gcmVnaXN0ZXJTZWN0aW9ucyhzZWN0aW9ucykge1xyXG5cdFx0XHRzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xyXG5cdFx0XHRcdHN0YXRlLnJlc29sdmUgPVxyXG5cdFx0XHRcdFx0YW5ndWxhci5leHRlbmQoc3RhdGUucmVzb2x2ZSB8fCB7fSwgY29uZmlnLnJlc29sdmVBbHdheXMpO1xyXG5cdFx0XHRcdCRzdGF0ZVByb3ZpZGVyLnN0YXRlKHN0YXRlKTtcclxuXHRcdFx0XHRfc2VjdGlvbnMucHVzaChzdGF0ZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZ1bmN0aW9uIGdldE1vZHVsZXMoKSB7XHJcblx0XHQgICAgcmV0dXJuICRzdGF0ZS5nZXQoKS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcclxuXHRcdCAgICAgICAgcmV0dXJuIHguc2V0dGluZ3MgJiYgeC5zZXR0aW5ncy5tb2R1bGU7XHJcblx0XHQgICAgfSk7XHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gZ2V0U2VjdGlvbnMoKSB7XHJcblx0XHQgICAgLy9yZXR1cm4gJHN0YXRlLmdldCgpO1xyXG5cdFx0ICAgIHJldHVybiBfc2VjdGlvbnM7XHJcblx0XHR9XHJcblxyXG5cdH1cclxufVxyXG4iLCJcclxuYW5ndWxhci5tb2R1bGUoJ2FwcC5sb2dnaW5nJywgW10pOyIsIlxyXG5hbmd1bGFyLm1vZHVsZSgnYXBwLmxvZ2dpbmcnKVxyXG4gICAgLnNlcnZpY2UoJ2xvZ2dlcicsIGxvZ2dlclNlcnZpY2UpO1xyXG5cclxuLy8gQG5nSW5qZWN0XHJcbmZ1bmN0aW9uIGxvZ2dlclNlcnZpY2UoJGxvZykge1xyXG5cclxuICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgIGluZm86IGluZm8sXHJcbiAgICAgICAgd2FybmluZzogd2FybmluZyxcclxuICAgICAgICBlcnJvcjogZXJyb3IsXHJcbiAgICAgICAgbG9nOiAkbG9nXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBzZXJ2aWNlO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBpbmZvKG1lc3NhZ2UsIGRhdGEpIHtcclxuICAgICAgICAkbG9nLmluZm8oJ0luZm86ICcgKyBtZXNzYWdlLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UsIGRhdGEpIHtcclxuICAgICAgICAkbG9nLmluZm8oJ1dBUk5JTkc6ICcgKyBtZXNzYWdlLCBkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCBkYXRhKSB7XHJcbiAgICAgICAgJGxvZy5lcnJvcignRVJST1I6ICcgKyBtZXNzYWdlLCBkYXRhKTtcclxuICAgIH1cclxufSIsImFuZ3VsYXIubW9kdWxlKCdhcHAubGF5b3V0JywgWyd1aS5ib290c3RyYXAnXSk7ICIsImFuZ3VsYXIubW9kdWxlKCdhcHAubGF5b3V0JylcclxuICAgIC5ydW4oYXBwUnVuKTtcclxuXHJcbi8qIEBuZ0luamVjdCAqL1xyXG5mdW5jdGlvbiBhcHBSdW4oc2VjdGlvbk1hbmFnZXIpIHtcclxuXHJcbiAgICBzZWN0aW9uTWFuYWdlci5yZWdpc3RlcihbXHJcblxyXG4gICAgXSlcclxuXHJcbn0iLCJhbmd1bGFyLm1vZHVsZSgnYXBwLmRhc2hib2FyZCcsIFsnYXBwLnNlY3Rpb25zJ10pXHJcbiAgICAucnVuKGFwcFJ1bik7XHJcbi8vLmNvbmZpZyhmdW5jdGlvbiAoJHN0YXRlUHJvdmlkZXIpIHtcclxuXHJcbi8vICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdyb290Jywge1xyXG4vLyAgICAgICAgdXJsOiAnJyxcclxuLy8gICAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4vLyAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHVpLXZpZXc+PC9kaXY+J1xyXG4vLyAgICB9KTtcclxuXHJcbi8vICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdkYXNoYm9hcmQnLCB7XHJcbi8vICAgICAgICB1cmw6ICcnLFxyXG4vLyAgICAgICAgcGFyZW50OiAncm9vdCcsXHJcbi8vICAgICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcicsXHJcbi8vICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbi8vICAgICAgICB0ZW1wbGF0ZVVybDogJ2FwcC9hcmVhcy9kYXNoYm9hcmQvZGFzaGJvYXJkLmh0bWwnXHJcbi8vICAgIH0pO1xyXG5cclxuLy99KTtcclxuXHJcbmZ1bmN0aW9uIGFwcFJ1bihzZWN0aW9uTWFuYWdlcikge1xyXG5cclxuICAgIHNlY3Rpb25NYW5hZ2VyLnJlZ2lzdGVyKGdldFN0YXRlcygpKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFN0YXRlcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnZGFzaGJvYXJkJyxcclxuICAgICAgICAgICAgdXJsOiAnJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0Rhc2hib2FyZENvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXBwL2FyZWFzL2Rhc2hib2FyZC9kYXNoYm9hcmQuaHRtbCcsXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBtb2R1bGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBvcmRlcjogMVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG59IiwiXHJcbmFuZ3VsYXIubW9kdWxlKCdhcHAuZGFzaGJvYXJkJylcclxuICAgIC5jb250cm9sbGVyKCdEYXNoYm9hcmRDb250cm9sbGVyJywgRGFzaGJvYXJkQ29udHJvbGxlcik7XHJcblxyXG4vLyBAbmdJbmplY3RcclxuZnVuY3Rpb24gRGFzaGJvYXJkQ29udHJvbGxlcigpIHtcclxuICAgIHRoaXMubWVzc2FnZSA9IFwiSGVsbG8gV29ybGRcIjtcclxufSIsImFuZ3VsYXIubW9kdWxlKCdhcHAubGF5b3V0JylcclxuICAgIC5jb250cm9sbGVyKCdTaGVsbENvbnRyb2xsZXInLCBTaGVsbENvbnRyb2xsZXIpO1xyXG5cclxuLyogQG5nSW5qZWN0ICovXHJcbmZ1bmN0aW9uIFNoZWxsQ29udHJvbGxlcihzZWN0aW9uTWFuYWdlcikge1xyXG5cclxuICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICB2bS5zZWN0aW9ucyA9IHNlY3Rpb25NYW5hZ2VyLmdldE1vZHVsZXMoKTtcclxuXHJcbn0iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG59KCkpOyIsImFuZ3VsYXIubW9kdWxlKCdzb2xvbW9uJyxcclxuICAgIFtcclxuICAgICAgICAnYXBwLmxheW91dCcsXHJcbiAgICAgICAgJ2FwcC5sb2dnaW5nJyxcclxuICAgICAgICAnYXBwLnNlY3Rpb25zJyxcclxuICAgICAgICAnc29sb21vbi5wYXJ0aWFscycsXHJcbiAgICAgICAgJ2FwcC5kYXNoYm9hcmQnLFxyXG4gICAgICAgICdzeW1iaW90ZS5jb21tb24nXHJcbiAgICBdKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=