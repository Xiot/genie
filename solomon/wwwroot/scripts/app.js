!function(){"use strict";function t(t,n,o){t.$state=n,t.$stateParams=o,t.$on("$stateChangeStart",function(t,n,o){console.log("$stateChangeStart to "+n.to+"- fired when the transition begins. toState,toParams : \n",n,o)}),t.$on("$stateChangeError",function(){console.log("$stateChangeError - fired when an error occurs during transition."),console.log(arguments)}),t.$on("$stateChangeSuccess",function(t,n){console.log("$stateChangeSuccess to "+n.name+"- fired once the state transition is complete.")}),t.$on("$viewContentLoaded",function(t){console.log("$viewContentLoaded - fired after dom rendered",t)}),t.$on("$stateNotFound",function(t,n,o,e){console.log("$stateNotFound "+n.to+"  - fired when a state cannot be found by its name."),console.log(n,o,e)})}angular.module("app.sections",["ui.router"]),angular.module("app.sections").run(t),t.$inject=["$rootScope","$state","$stateParams"]}(),function(){"use strict";function t(t,n){function o(n,o){function r(n){n.forEach(function(n){n.resolve=angular.extend(n.resolve||{},e.resolveAlways),t.state(n),i.push(n)})}function a(){return o.get().filter(function(t){return t.settings&&t.settings.module})}function s(){return i}var i=[],u={getSections:s,register:r,getModules:a};return u}var e={resolveAlways:{}};this.configure=function(t){angular.extend(e,t)},n.html5Mode(!0),this.$get=o,o.$inject=["$rootScope","$state"]}angular.module("app.sections").provider("sectionManager",t),t.$inject=["$stateProvider","$locationProvider"]}(),function(){"use strict";function t(t){t.register(n())}function n(){return[{name:"dashboard",url:"",controller:"DashboardController",controllerAs:"vm",templateUrl:"app/areas/dashboard/dashboard.html",settings:{module:!0,order:1}}]}angular.module("app.dashboard",["app.sections"]).run(t),t.$inject=["sectionManager"]}(),function(){"use strict";function t(){this.message="Hello World"}angular.module("app.dashboard").controller("DashboardController",t)}(),function(){"use strict";angular.module("app.logging",[])}(),function(){"use strict";function t(t){function n(n,o){t.info("Info: "+n,o)}function o(n,o){t.info("WARNING: "+n,o)}function e(n,o){t.error("ERROR: "+n,o)}var r={info:n,warning:o,error:e,log:t};return r}angular.module("app.logging").service("logger",t),t.$inject=["$log"]}(),function(){"use strict"}(),function(){"use strict";angular.module("app.layout",["ui.bootstrap"])}(),function(){"use strict";function t(t){var n=this;n.sections=t.getModules()}angular.module("app.layout").controller("ShellController",t),t.$inject=["sectionManager"]}(),function(){"use strict"}(),function(){"use strict";angular.module("solomon",["app.layout","app.logging","app.sections","solomon.partials","app.dashboard"])}();
//# sourceMappingURL=data:application/json;base64,